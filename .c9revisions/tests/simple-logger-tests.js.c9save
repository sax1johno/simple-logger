{"ts":1360351859644,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360351868960,"patch":[[{"diffs":[[1,"var nodeunit = require('nodeunit');\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema\n\nexports.simpleLoggerTests = nodeunit.testCase({\n    'testConstructor': function(test) {\n        var mongooseRegistry = require('../lib/mongoose_registry');\n        test.done();\n    },\n    'testAdd': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            title:      String,\n            test:       String\n        });\n        reg.add(testSchema, 't', function(success) {\n            test.ok(success, \"Registration adding should've succceeded\");\n            reg.log(function(schemas) {\n                console.log(JSON.stringify(schemas));\n                test.done();                \n            })\n        })\n    },\n    'testAddEvent': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            title:      String,\n            test:       String\n        });\n        reg.on('add', function(tag, schema) {\n            console.log(\"Tag \" + tag + \" was added with schema \" + JSON.stringify(schema));\n            test.done();\n        });\n        reg.add(testSchema, 't');\n        \n    },\n    'testRemove': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            \n        });\n        reg.add(testSchema, 't', function(success) {\n            reg.remove('t', function(success) {\n                test.ok(success, 'Should have removed the schema from the registry');\n                reg.log(function(schemas) {\n                    console.log(JSON.stringify(schemas));\n                    test.done();\n                });\n            });\n        });\n    },\n    'testRemoveEvent': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            \n        });\n        reg.on('remove', function(schema) {\n            console.log(\"schema = \" + JSON.stringify(schema));\n            test.done();\n        })\n        reg.add(testSchema, 't', function(success) {\n            reg.remove('t');\n        });\n    },    \n    'testGet': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            \n        });\n        reg.add(testSchema, 't', function(success) {\n            reg.get('t', function(schema) {\n                test.deepEqual(schema, testSchema, 'Schemas should be deep equal to each other.');\n                reg.log(function(schemas) {\n                    console.log(JSON.stringify(schemas));\n                    test.done();\n                });\n            });\n        });\n    },\n    'testKeys': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({});\n        var testSchema2 = new Schema({});\n        var testSchema3 = new Schema({});\n        \n        reg.add(testSchema, 't', function(success) {\n            reg.add(testSchema2, 't2', function(success) {\n                reg.add(testSchema3, 't3', function(success) {\n                    reg.getKeys(function(keys) {\n                        var testArray = ['t', 't2', 't3'];\n                        test.deepEqual(testArray, keys);\n                        test.done();\n                    })\n                })\n            })\n        })\n    }\n});"]],"start1":0,"start2":0,"length1":0,"length2":3363}]],"length":3363,"saved":false}
{"ts":1360351878640,"patch":[[{"diffs":[[0,"t');"],[-1,"\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema"],[0,"\n\nex"]],"start1":31,"start2":31,"length1":73,"length2":8}]],"length":3298,"saved":false}
{"ts":1360351944780,"patch":[[{"diffs":[[0,"var "],[-1,"mongooseRegistry"],[1,"simpleLogger"],[0," = r"]],"start1":133,"start2":133,"length1":24,"length2":20},{"diffs":[[0,"'../lib/"],[-1,"mongoose_registry"],[1,"simple_logger"],[0,"');\n    "]],"start1":160,"start2":160,"length1":33,"length2":29}]],"length":3290,"saved":false}
{"ts":1360352041960,"patch":[[{"diffs":[[0,"test"],[-1,"Add': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            title:      String,\n            test:       String\n        });\n        reg.add(testSchema, 't',"],[1,"Logging':"],[0," fun"]],"start1":218,"start2":218,"length1":231,"length2":17},{"diffs":[[0,"ging': function("],[-1,"success"],[1,"test"],[0,") {\n            "]],"start1":225,"start2":225,"length1":39,"length2":36},{"diffs":[[0,"    "],[-1,"    test.ok(success, \"Registration adding should've succceeded\");\n            reg.log(function(schemas) {\n                console.log(JSON.stringify(schemas));\n                test.done();                \n            })\n        })\n    },\n    'testAddEvent': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            title:      String,\n            test:       String\n        });\n        reg.on('add', function(tag, schema) {\n            console.log(\"Tag \" + tag + \" was added with schema \" + JSON.stringify(schema));\n            test.done();\n        });\n        reg.add(testSchema, 't');\n        \n    },\n    'testRemove': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            \n        });\n        reg.add(testSchema, 't', function(success) {\n            reg.remove('t', function(success) {\n                test.ok(success, 'Should have removed the schema from the registry');\n                reg.log(function(schemas) {\n                    console.log(JSON.stringify(schemas));\n                    test.done();\n                });\n            });\n        });\n    },\n    'testRemoveEvent': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            \n        });\n        reg.on('remove', function(schema) {\n            console.log(\"schema = \" + JSON.stringify(schema));\n            test.done();\n        })\n        reg.add(testSchema, 't', function(success) {\n            reg.remove('t');\n        });\n    },    \n    'testGet': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({\n            \n        });\n        reg.add(testSchema, 't', function(success) {\n            reg.get('t', function(schema) {\n                test.deepEqual(schema, testSchema, 'Schemas should be deep equal to each other.');\n                reg.log(function(schemas) {\n                    console.log(JSON.stringify(schemas));\n                    test.done();\n                });\n            });\n        });\n    },\n    'testKeys': function(test) {\n        var reg = require('../lib/mongoose_registry');\n        var testSchema = new Schema({});\n        var testSchema2 = new Schema({});\n        var testSchema3 = new Schema({});\n        \n        reg.add(testSchema, 't', function(success) {\n            reg.add(testSchema2, 't2', function(success) {\n                reg.add(testSchema3, 't3', function(success) {\n                    reg.getKeys(function(keys) {\n                        var testArray = ['t', 't2', 't3'];\n                        test.deepEqual(testArray, keys);\n                        test.done();\n                    })\n                })\n            })\n        })"],[1,"var simpleLogger = require('../lib/simple_logger');\n        var testMessage = 'This is an error message');\n        simpleLogger.on('error', function(message) {\n            test.assertEquals(message, testMessage);\n            test.done();\n        }"],[0,"\n   "]],"start1":253,"start2":253,"length1":2814,"length2":255}]],"length":514,"saved":false}
{"ts":1360352089751,"patch":[[{"diffs":[[0,"message'"],[-1,")"],[0,";\n"],[1,""],[0,"        "]],"start1":353,"start2":353,"length1":19,"length2":18},{"diffs":[[0,"(message) {\n"],[1,"            console.log(\"ERROR: \" + message);\n"],[0,"            "]],"start1":404,"start2":404,"length1":24,"length2":70},{"diffs":[[0,"est.done();\n"],[-1,""],[0,"        }\n  "]],"start1":528,"start2":528,"length1":24,"length2":24},{"diffs":[[0,"       }"],[1,");\n        simpleLogger.log('error', testMessage);"],[0,"\n    }\n}"]],"start1":541,"start2":541,"length1":16,"length2":66}]],"length":609,"saved":false}
{"ts":1360352091815,"patch":[[{"diffs":[[0,"    });\n"],[1,"        \n"],[0,"        "]],"start1":544,"start2":544,"length1":16,"length2":25}]],"length":618,"saved":false}
{"ts":1360352376608,"patch":[[{"diffs":[[0,"ssage';\n"],[1,"        var textExit = false;\n"],[0,"        "]],"start1":355,"start2":355,"length1":16,"length2":46},{"diffs":[[0,", testMessage);\n"],[1,"            testExit = true;\n"],[0,"            test"]],"start1":529,"start2":529,"length1":32,"length2":61},{"diffs":[[0,"stMessage);\n"],[1,"        \n"],[0,"    }\n});"]],"start1":656,"start2":656,"length1":21,"length2":30}]],"length":686,"saved":false}
{"ts":1360352380228,"patch":[[{"diffs":[[0,"e);\n"],[-1,"            testExit = true;\n"],[0,"    "]],"start1":541,"start2":541,"length1":37,"length2":8}]],"length":657,"saved":false}
{"ts":1360352385508,"patch":[[{"diffs":[[0,", testMessage);\n"],[1,"        while(1) {};"],[0,"        \n    }\n}"]],"start1":623,"start2":623,"length1":32,"length2":52}]],"length":677,"saved":false}
{"ts":1360352389433,"patch":[[{"diffs":[[0,"le(1) {}"],[-1,";"],[0,"        "]],"start1":650,"start2":650,"length1":17,"length2":16}]],"length":676,"saved":false}
{"ts":1360352402356,"patch":[[{"diffs":[[0,"e);\n"],[-1,"        while(1) {}        \n"],[0,"    "]],"start1":635,"start2":635,"length1":36,"length2":8}]],"length":648,"saved":false}
{"ts":1360352437648,"patch":[[{"diffs":[[0," false;\n"],[1,"        \n"],[0,"        "]],"start1":385,"start2":385,"length1":16,"length2":25}]],"length":657,"saved":false}
{"ts":1360352638844,"patch":[[{"diffs":[[0,"est."],[-1,"assertE"],[1,"e"],[0,"qual"]],"start1":514,"start2":514,"length1":15,"length2":9}]],"length":651,"saved":false}
{"ts":1360352673704,"patch":[[{"diffs":[[0,") {\n"],[-1,"            console.log(\"ERROR: \" + message);\n"],[0,"    "]],"start1":451,"start2":451,"length1":54,"length2":8}]],"length":605,"saved":false}
{"ts":1360352707710,"patch":[[{"diffs":[[0,"stMessage);\n"],[1,"            console.log(\"ERROR: \" + message);\n"],[0,"            "]],"start1":490,"start2":490,"length1":24,"length2":70}]],"length":651,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360354088216,"patch":[[{"diffs":[[0,"e);\n"],[-1,"            console.log(\"ERROR: \" + message);\n"],[0,"    "]],"start1":498,"start2":498,"length1":54,"length2":8}]],"length":605,"saved":false}
