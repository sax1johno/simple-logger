{"ts":1360351084352,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360351161940,"patch":[[{"diffs":[[1,"var _ = require('underscore'),\n    EventEmitter = require('events').EventEmitter;\n\nfunction SimpleLogger() {\n    /* This class is a singleton */\n    if (arguments.callee._singletonInstance) {\n        return arguments.callee._singletonInstance;\n    }\n    arguments.callee._singletonInstance = this;\n    \n    EventEmitter.call(this);\n    \n    /** \n     * Add a new schema to the schema registry.  If a tag is re-used, the previous schema\n     * is overwritten.\n     * @param schema the schema to add.\n     * @param tag the tag for this schema (used to retrieve the schema)\n     * @return the added schema.\n     **/\n    this.add = function(schema, tag, fn) {\n        if (!_.isUndefined(fn) && !_.isNull(fn) && _.isFunction(fn)) {\n            fn(schemas[tag] = schema);\n        } else {\n            schemas[tag] = schema;\n        }\n        this.emit('add', tag, schema);        \n    };\n    \n    this.remove = function(tag, fn) {\n        var deleted = schemas[tag];\n        if (!_.isUndefined(fn) && !_.isNull(fn) && _.isFunction(fn)) {\n            fn(delete schemas[tag]);            \n        } else {\n            delete schemas[tag];\n        }\n        this.emit('remove', deleted);\n    };\n    \n    this.get = function(tag, fn) {\n        fn(schemas[tag]);\n    };\n    \n    /** For testing purposes.  Will probably go away soon **/\n    this.log = function(fn) {\n        fn(schemas);\n    };\n    \n    this.getKeys = function(fn) {\n        fn(_.keys(schemas));\n    }\n}\n\nMongooseRegistry.prototype.__proto__ = EventEmitter.prototype;\n\nmodule.exports = new MongooseRegistry();"]],"start1":0,"start2":0,"length1":0,"length2":1565}]],"length":1565,"saved":false}
{"ts":1360351226420,"patch":[[{"diffs":[[0,"this);\n    \n"],[1,"    // First, some basic loglevels.  These can be overridden by the developer if desired.\n    this.LOGLEVELS = {\n        'error': 0,\n        '\n    }\n"],[0,"    /** \n   "]],"start1":325,"start2":325,"length1":24,"length2":173}]],"length":1714,"saved":false}
{"ts":1360351235691,"patch":[[{"diffs":[[0,") {\n"],[-1,"    /* This class is a singleton */\n    if (arguments.callee._singletonInstance) {\n        return arguments.callee._singletonInstance;\n    }\n    arguments.callee._singletonInstance = this;\n    \n"],[0,"    "]],"start1":105,"start2":105,"length1":202,"length2":8}]],"length":1520,"saved":false}
{"ts":1360351280577,"patch":[[{"diffs":[[0,"   '"],[-1,"error': 0,\n        '"],[1,"fatal': 0,\n        'error': 1,\n        'warning': 2,\n        'debug': 3,\n        'info': 4,\n        'trace': 5"],[0,"\n    }\n"],[1,"    \n"],[0,"    "]],"start1":261,"start2":261,"length1":35,"length2":130}]],"length":1615,"saved":false}
{"ts":1360351400830,"patch":[[{"diffs":[[0,"eLogger() {\n"],[1,"        /* This class is a singleton */\n    if (arguments.callee._singletonInstance) {\n        return arguments.callee._singletonInstance;\n    }\n    arguments.callee._singletonInstance = this;\n    \n"],[0,"    EventEmi"]],"start1":97,"start2":97,"length1":24,"length2":222},{"diffs":[[0,"call(this);\n"],[-1,""],[0,"    \n    // "]],"start1":324,"start2":324,"length1":24,"length2":24},{"diffs":[[0,"    "],[-1,"/** \n     * Add a new schema to the schema registry.  If a tag is re-used, the previous schema\n     * is overwritten.\n     * @param schema the schema to add.\n     * @param tag the tag for this schema (used to retrieve the schema)\n     * @return the added schema.\n     **/\n    this.add = function(schema, tag, fn) {\n        if (!_.isUndefined(fn) && !_.isNull(fn) && _.isFunction(fn)) {\n            fn(schemas[tag] = schema);\n        } else {\n            schemas[tag] = schema;\n        }\n        this.emit('add', tag, schema);        \n    };\n    \n    this.remove = function(tag, fn) {\n        var deleted = schemas[tag];\n        if (!_.isUndefined(fn) && !_.isNull(fn) && _.isFunction(fn)) {\n            fn(delete schemas[tag]);            \n        } else {\n            delete schemas[tag];\n        }\n        this.emit('remove', deleted);\n    };\n    \n    this.get = function(tag, fn) {\n        fn(schemas[tag]);\n    };\n    \n    /** For testing purposes.  Will probably go away soon **/\n    this.log = function(fn) {\n        fn(schemas);\n    };\n    \n    this.getKeys = function(fn) {\n        fn(_.keys(schemas));"],[1,"this.log = function(level, message) {\n        this.emit('')"],[0,"\n   "]],"start1":585,"start2":585,"length1":1118,"length2":67}]],"length":762,"saved":false}
{"ts":1360351415415,"patch":[[{"diffs":[[0,"mit("],[-1,"'')"],[1,"level, message);"],[0,"\n   "]],"start1":641,"start2":641,"length1":11,"length2":24}]],"length":775,"saved":false}
{"ts":1360351493279,"patch":[[{"diffs":[[0,"    "],[-1,"this.log = function(level, message) {"],[1,"// defaults to debug.\n    this.loglevel = 'debug';\n    \n    this.log = function(level, message) {\n        var logNumber = this.LOGLEVELS[level];\n        "],[0,"\n   "]],"start1":585,"start2":585,"length1":45,"length2":161},{"diffs":[[0,";\n    }\n"],[1,"    \n    this.\n"],[0,"}\n\nMongo"]],"start1":776,"start2":776,"length1":16,"length2":31}]],"length":906,"saved":false}
{"ts":1360351500651,"patch":[[{"diffs":[[0,"l];\n        "],[1,"    "],[0,"\n        thi"]],"start1":730,"start2":730,"length1":24,"length2":28}]],"length":910,"saved":false}
{"ts":1360351548418,"patch":[[{"diffs":[[0,"ebug';\n    \n"],[1,"    this.getLogLevelValue = function() {\n        return this.LOGLEVELS[this.loglevel];\n    }\n    \n"],[0,"    this.log"]],"start1":633,"start2":633,"length1":24,"length2":122},{"diffs":[[0,"        "],[-1,"    "],[0,"\n       "]],"start1":832,"start2":832,"length1":20,"length2":16}]],"length":1004,"saved":false}
{"ts":1360351581796,"patch":[[{"diffs":[[0,"l];\n        "],[-1,"\n"],[1,"if (logNumber >= this.getLogLevelValue()) {\n    "],[0,"        this"]],"start1":828,"start2":828,"length1":25,"length2":72},{"diffs":[[0,"ssage);\n"],[1,"        }\n"],[0,"    }\n  "]],"start1":915,"start2":915,"length1":16,"length2":26}]],"length":1061,"saved":false}
{"ts":1360351604706,"patch":[[{"diffs":[[0,"   this."],[1,"error = function(message) {\n        this.log('error', message);\n    }"],[0,"\n}\n\nMong"]],"start1":945,"start2":945,"length1":16,"length2":85}]],"length":1130,"saved":false}
{"ts":1360351700385,"patch":[[{"diffs":[[0,"esired.\n"],[1,"    // It's strongly suggested that you keep the current log levels as it can break other de\n"],[0,"    this"]],"start1":423,"start2":423,"length1":16,"length2":109},{"diffs":[[0,"rror': 1"],[1,"00"],[0,",\n      "]],"start1":577,"start2":577,"length1":16,"length2":18},{"diffs":[[0,"ning': 2"],[1,"00"],[0,",\n      "]],"start1":601,"start2":601,"length1":16,"length2":18},{"diffs":[[0,"ebug': 3"],[1,"00"],[0,",\n      "]],"start1":623,"start2":623,"length1":16,"length2":18},{"diffs":[[0,"info': 4"],[1,"00"],[0,",\n      "]],"start1":644,"start2":644,"length1":16,"length2":18},{"diffs":[[0,"race': 5"],[1,"00"],[0,"\n    }\n "]],"start1":666,"start2":666,"length1":16,"length2":18},{"diffs":[[0,"   \n"],[-1,"    this.error = function(message) {\n        this.log('error', message);\n    }\n"],[0,"}\n\nM"]],"start1":1043,"start2":1043,"length1":87,"length2":8}]],"length":1154,"saved":false}
{"ts":1360351706930,"patch":[[{"diffs":[[0,"    \n}\n\n"],[-1,"MongooseRegistry"],[1,"SimpleLogger"],[0,".prototy"]],"start1":1042,"start2":1042,"length1":32,"length2":28},{"diffs":[[0,"new "],[-1,"MongooseRegistry"],[1,"SimpleLogger"],[0,"();"]],"start1":1127,"start2":1127,"length1":23,"length2":19}]],"length":1146,"saved":false}
{"ts":1360351716299,"patch":[[{"diffs":[[0,"': 500\n    }"],[1,";"],[0,"\n    \n    //"]],"start1":670,"start2":670,"length1":24,"length2":25},{"diffs":[[0,"evel];\n    }"],[1,";"],[0,"\n    \n    th"]],"start1":829,"start2":829,"length1":24,"length2":25},{"diffs":[[0,"     }\n    }"],[1,";"],[0,"\n    \n}\n\nSim"]],"start1":1031,"start2":1031,"length1":24,"length2":25}]],"length":1149,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360353262714,"patch":[[{"diffs":[[0,"itter;\n\n"],[1,"/**\n * SimpleLogger is a basic logging utility that uses events to let developers manage logging facilities.\n * By default, events are merely fired when the appropriate loglevels are encountered and provides a basic\n * console logger that can be used by the developer.  Logging functionality can be overridden by \n * removing the listeners that are attached to this EventEmitter.\n * \n **/\n"],[0,"function"]],"start1":75,"start2":75,"length1":16,"length2":405},{"diffs":[[0,"ed.\n"],[-1,"    // It's strongly suggested that you keep the current log levels as it can break other de\n"],[0,"    "]],"start1":816,"start2":816,"length1":101,"length2":8},{"diffs":[[0," message"],[-1,""],[0,""],[1,", fn"],[0,") {\n    "]],"start1":1174,"start2":1174,"length1":16,"length2":20},{"diffs":[[0,"ber "],[-1,">"],[1,"<"],[0,"= th"]],"start1":1255,"start2":1255,"length1":9,"length2":9},{"diffs":[[0,"    "],[-1,"}\n    };"],[1,"    if (!_.isUndefined(fn) && !_.isNull(fn)) {\n                fn(message);\n            }\n        }\n    };\n    \n    "],[0,"\n   "]],"start1":1332,"start2":1332,"length1":16,"length2":124}]],"length":1557,"saved":false}
{"ts":1360353417687,"patch":[[{"diffs":[[0,"};\n    \n"],[-1,"    \n    \n"],[0,"}\n\nSimpl"]],"start1":1440,"start2":1440,"length1":26,"length2":16}]],"length":1547,"saved":false}
{"ts":1360353439122,"patch":[[{"diffs":[[0,"};\n    \n"],[1,"    this.on('error', function(message) {\n        console.log(\"ERROR: \" + message);\n    });\n    \n"],[0,"}\n\nSimpl"]],"start1":1440,"start2":1440,"length1":16,"length2":112}]],"length":1643,"saved":false}
{"ts":1360353445890,"patch":[[{"diffs":[[0,"  };"],[-1,"\n"],[0,"   "],[-1," \n    this.on('error', function(message) {\n        console.log(\"ERROR: \" + message);\n    });"],[0,"\n   "]],"start1":1438,"start2":1438,"length1":104,"length2":11}]],"length":1550,"saved":false}
{"ts":1360353447137,"patch":[[{"diffs":[[0,"}\n    };"],[-1,"   "],[0,"\n    \n}\n"]],"start1":1434,"start2":1434,"length1":19,"length2":16}]],"length":1547,"saved":false}
{"ts":1360353496778,"patch":[[{"diffs":[[0,"};\n    \n"],[1,"    \n"],[0,"}\n\nSimpl"]],"start1":1440,"start2":1440,"length1":16,"length2":21}]],"length":1552,"saved":false}
{"ts":1360353831974,"patch":[[{"diffs":[[0,"er.\n * \n"],[1," * To override the default catchall logger, remove the 'log' listener from SimpleLogger\n * SimpleLogger.removeListener('log');\n"],[0," **/\nfun"]],"start1":459,"start2":459,"length1":16,"length2":143},{"diffs":[[0,"   \n    "],[1,"this.on('log', function(level, message) {\n        console.log\n    })"],[0,"\n}\n\nSimp"]],"start1":1571,"start2":1571,"length1":16,"length2":84}]],"length":1747,"saved":false}
{"ts":1360353858736,"patch":[[{"diffs":[[0,"rom "],[-1,"SimpleLogger\n * SimpleLogger"],[1,"this object using the following the following:\n * MyLog"],[0,".rem"]],"start1":538,"start2":538,"length1":36,"length2":63}]],"length":1774,"saved":false}
{"ts":1360353872091,"patch":[[{"diffs":[[0,"lValue()) {\n"],[1,"            this.emit(log, level, message);\n"],[0,"            "]],"start1":1431,"start2":1431,"length1":24,"length2":68}]],"length":1818,"saved":false}
{"ts":1360353878351,"patch":[[{"diffs":[[0,"is.emit("],[1,"'"],[0,"log"],[1,"'"],[0,", level,"]],"start1":1457,"start2":1457,"length1":19,"length2":21}]],"length":1820,"saved":false}
{"ts":1360353940492,"patch":[[{"diffs":[[0,"\n * "],[-1,"To overrid"],[1,"By default, a catchall logging event called 'log' provides a console message with the loglevel and message.\n * To disabl"],[0,"e th"]],"start1":466,"start2":466,"length1":18,"length2":128},{"diffs":[[0,"'log');\n"],[1," * \n * You can also register for the \"log\" event if you want to be notified when a log is fired.\n"],[0," **/\nfun"]],"start1":723,"start2":723,"length1":16,"length2":113}]],"length":2027,"saved":false}
{"ts":1360353953631,"patch":[[{"diffs":[[0,"sole.log"],[1,"(level + \": \" + message);"],[0,"\n    })\n"]],"start1":1912,"start2":1912,"length1":16,"length2":41}]],"length":2052,"saved":false}
